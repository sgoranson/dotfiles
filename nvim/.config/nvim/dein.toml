[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'SirVer/ultisnips'
hook_add = '''
let g:UltiSnipsExpandTrigger="<c-s>"
let g:UltiSnipsJumpForwardTrigger="<c-s>"
let g:UltiSnipsJumpBackwardTrigger="<c-p>"

let g:UltiSnipsSnippetDirectories=["UltiSnips", "snips"]

'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'shougo/deoplete.nvim'
hook_add = '''
    let g:deoplete#enable_at_startup = 1
    call deoplete#custom#source('ultisnips', 'rank', 1000)
    " ditch fuzzy mwatching
    call deoplete#custom#source('_', 'matchers', ['matcher_head'])

    " call deoplete#custom#source('buffer', 'min_pattern_length', 9999)
    call deoplete#custom#source('clang', 'input_pattern', '\.\w*|\.->\w*|\w+::\w*')
    call deoplete#custom#source('clang', 'max_pattern_length', -1)


    let g:deoplete#sources#ternjs#tern_bin = '/usr/bin/tern'
    let g:deoplete#sources#ternjs#types = 1
    let g:deoplete#sources#ternjs#docs = 1

    let g:deoplete#keyword_patterns = {}
    let g:deoplete#keyword_patterns._ = '[a-zA-Z_]\k*\(?'
    let g:deoplete#keyword_patterns.tex = '[^\w|\s][a-zA-Z_]\w*'

    let g:deoplete#omni#input_patterns = {}
    let g:deoplete#omni#input_patterns.python = ''


    let g:deoplete#omni#functions = {}

    let g:deoplete#omni#functions.javascript = [ 'tern#Complete', 'jspc#omni' ]

    let g:tern#command = ["/usr/bin/tern"]
    let g:tern#arguments = ["--persistent"]


    let g:deoplete#sources#jedi#enable_typeinfo = 0
    let g:deoplete#sources#jedi#show_docstring = 1

    " inoremap <silent><expr> <C-t> deoplete#manual_complete('file')

    "let g:deoplete#enable_refresh_always = 0
    let g:deoplete#enable_camel_case = 0
    " let g:deoplete#auto_complete_delay = 50
    " let g:deoplete#auto_complete_start_length = 3
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
if executable('rg')
    call denite#custom#var('file_rec', 'command', ['rg', '--files', '--hidden', '--glob', '!.git'])

    call denite#custom#var('grep', 'command', ['rg'])
    call denite#custom#var('grep', 'default_opts', ['--vimgrep', '--no-heading', '-S'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
else
    call denite#custom#var('file_rec', 'command',
                \ ['ag', '--follow', '--hidden', '--nocolor', '--nogroup', '-g', ''])
endif

call denite#custom#alias('source', 'file_mru/git', 'file_mru')
call denite#custom#alias('source', 'file_rec/git', 'file_rec')
call denite#custom#var('file_rec/git', 'command',
        \   ['git', 'ls-files', '--cached', '--others', '--exclude-standard'] )

call denite#custom#alias('source', 'grep/git', 'grep')
call denite#custom#var('grep/git', 'command', ['git', '--no-pager', 'grep'])
call denite#custom#var('grep/git', 'default_opts',
        \   ['--ignore-case', '--cached', '--untracked', '--exclude-standard', '-nH'] )
call denite#custom#var('grep/git', 'recursive_opts', [])
call denite#custom#var('grep/git', 'pattern_opt', ['--extended-regexp'])
call denite#custom#var('grep/git', 'separator', [])
call denite#custom#var('grep/git', 'final_opts', [])


"call denite#custom#var('commands', 'config', g:vim_home_dir . '/mycmds.json' )


call denite#custom#source('unite:mapping', 'sorters', ['sorter/word'])

call denite#custom#var('neoyank', 'default_action', ['yank'])

call denite#custom#source('grep,grep/git,file_mru,buffer,file_rec/git,line,help,unite', 'matchers', ['matcher_substring'])
call denite#custom#source('file_rec', 'matchers', ['matcher_substring', 'matcher_project_files'])
call denite#custom#source('file_mru/git', 'matchers', ['matcher_substring', 'matcher_project_files'])
call denite#custom#source('line', 'converters', ['converter_relative_word'])

    call denite#custom#map('insert', '<Down>', '<C-G>')
    call denite#custom#map('insert', '<C-j>', '<C-G>')
    call denite#custom#map('insert', '<Up>', '<C-T>')
    call denite#custom#map('insert', '<C-k>', '<C-T>')

    call denite#custom#map('insert','<C-f>','<denite:scroll_page_forwards>','noremap')
    call denite#custom#map('insert','<C-b>','<denite:scroll_page_backwards>','noremap')

    call denite#custom#map('insert','<Tab>','<denite:move_to_next_line>','noremap')
    call denite#custom#map('insert','<C-s>','<denite:do_action:split>','noremap')
    call denite#custom#map('insert','<C-v>','<denite:do_action:vsplit>','noremap')
    call denite#custom#map('insert','<S-Tab>','<denite:move_to_previou_line>','noremap')
    call denite#custom#map('insert','<C-space>','<denite:choose_action>','noremap')


    let s:denite_options = {'default' : {
        \ 'winheight' : 15,
        \ 'mode' : 'insert',
        \ 'smartcase' : 'true',
        \ 'highlight_matched_char' : 'Function',
        \ 'highlight_matched_range' : 'Function',
        \ 'direction': 'rightbelow',
        \ 'statusline' : 'false',
        \'prompt' : 'Î»',
        \ }}

    function! s:profile(opts) abort
    for fname in keys(a:opts)
    for dopt in keys(a:opts[fname])
call denite#custom#option(fname, dopt, a:opts[fname][dopt])
    endfor
    endfor
    endfunction

    call s:profile(s:denite_options)

'''

[[plugins]]
repo = 'Jagua/vim-denite-ghq'

[[plugins]]
repo = 'Shougo/neoyank.vim'


[[plugins]]
repo =  'Shougo/neomru.vim'

[[plugins]]
repo =  'yyotti/denite-marks'

[[plugins]]
repo =  'kmnk/denite-dirmark'

[[plugins]]
repo =  'Shougo/neoyank.vim'
hook_add = '''
let g:neoyank#file = expand('$XDG_CACHE_HOME/neoyank.yanks')
" let g:neoyank#save_registers = [ '"' ]
let g:neoyank#limit = 10
'''

[[plugins]]
repo =  'neoclide/denite-git'

[[plugins]]
repo =  'neoclide/vim-easygit'

[[plugins]]
repo =  'neoclide/denite-extra'

[[plugins]]
repo =  'Shougo/unite-outline'

[[plugins]]
repo =  'Shougo/tabpagebuffer.vim'

[[plugins]]
repo =  'thinca/vim-ref'

[[plugins]]
repo =  'Jagua/vim-denite-ghq'

[[plugins]]
repo =  'ryanoasis/vim-devicons'

[[plugins]]
repo =  'Shougo/unite.vim'






[[plugins]]
repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'rakr/vim-one'

[[plugins]]
repo = 'morhetz/gruvbox'

[[plugins]]
repo = 'lifepillar/vim-solarized8'









[[plugins]]
repo = 'airblade/vim-rooter'    

[[plugins]]
repo = 'Shougo/vimfiler.vim'
hook_add = '''
    let g:vimfiler_as_default_explorer = 1
    let g:vimfiler_ignore_pattern = '^\%(\.git\|\.DS_Store\)$'
'''

[[plugins]]
repo = 'cespare/vim-toml' 








[[plugins]]
repo = 'haya14busa/vim-textobj-function-syntax'  # req lib

[[plugins]]
repo = 'kana/vim-textobj-user'                   # req lib (diy objs)

[[plugins]]
repo = 'kana/vim-textobj-indent'                 # i textobj

[[plugins]]
repo = 'kana/vim-textobj-function'               # f textobj

[[plugins]]
repo = 'kana/vim-textobj-line'                   # l textobj

[[plugins]]
repo = 'beloglazov/vim-textobj-quotes'           # q textobj

[[plugins]]
repo = 'kana/vim-textobj-help'

[[plugins]]
repo = 'rhysd/vim-textobj-anyblock'               # b textobj (parens, quotes, brackets, <)

[[plugins]]
repo = 'terryma/vim-expand-region'

[[plugins]]
repo =  'easymotion/vim-easymotion'
hook_add = '''
let g:EasyMotion_keys = 'asdfghjkl;qwertyuiopzxcvbnmASDFGHJKLQWERTYUIOPZXCVBNM'
let g:Easymotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
'''

[[plugins]]
repo =  'junegunn/vim-easy-align'                   # ga =

[[plugins]]
repo = 'chrisbra/vim-zsh'                          # :Delete, :Rename, :SudoWrite

[[plugins]]
repo = 'tpope/vim-eunuch'                          # :Delete, :Rename, :SudoWrite

[[plugins]]
repo = 'tpope/vim-unimpaired'                      # yo, ]b, etc

[[plugins]]
repo = 'tpope/vim-commentary'                      # gcc, gcW, g/TODO/Commentary

[[plugins]]
repo = 'tpope/vim-fugitive'                        # git helper

[[plugins]]
repo = 'tpope/vim-repeat'                          # dot repeat for plugins

[[plugins]]
repo = 'airblade/vim-gitgutter'                  # shows changed lines, ]c hunk jumps

[[plugins]]
repo =  'kshenoy/vim-signature'                # shows marks, m/ shortcuts

[[plugins]]
repo =  'Chiel92/vim-autoformat'                # shows marks, m/ shortcuts

[[plugins]]
repo =  'PotatoesMaster/i3-vim-syntax'                # shows marks, m/ shortcuts

[[plugins]]
repo =  'chrisbra/Colorizer'                # shows marks, m/ shortcuts

[[plugins]]
repo =  'francoiscabrol/ranger.vim'                # shows marks, m/ shortcuts
# hook_add = '''
# let g:ranger_replace_netrw = 1
# '''


[[plugins]]
repo =  'itchyny/lightline.vim'                # shows marks, m/ shortcuts
hook_add = '''
function! MyGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
        \ || ! get(g:, 'gitgutter_enabled', 0)
        \ || winwidth('.') <= 90
    return ''
  endif
  let symbols = [
        \ g:gitgutter_sign_added . ' ',
        \ g:gitgutter_sign_modified . ' ',
        \ g:gitgutter_sign_removed . ' '
        \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []
  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor
  return join(ret, ' ')
endfunction


let g:lightline = {
            \ 'colorscheme': 'material',
            \ 'enable': { 'tabline': 0 },
            \ 'active': {
            \   'left': [ [ 'mode', 'paste'], [ 'readonly', 'fname', 'modified' ], [ 'mygutter' ] ],
            \ 'right': [ [ 'linez' ], [ 'percent' ], [ 'fileformat', 'fileencoding', 'filetype' ] ]
            \ },
            \ 'component_function': {
            \   'mygutter': 'MyGitGutter',
            \   'cocstatus': 'coc#status'
            \ }
            \ }

let g:lightline.inactive = {
    \ 'left': [ [ 'fname' ] ],
    \ 'right': [ [ 'lineinfo' ],
    \            [ 'percent' ] ] }

let g:lightline.component = {
    \   'fname': '%<%f',
		    \ 'linez': '%3l:%-2L' }
'''
