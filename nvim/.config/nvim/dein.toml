[[plugins]]
repo = 'tpope/vim-fugitive'                        # git helper



[[plugins]]
repo = 'airblade/vim-gitgutter'                  # shows changed lines, ]c hunk jumps

[[plugins]]
repo =  'kshenoy/vim-signature'                # shows marks, m/ shortcuts



[[plugins]]
repo =  'rbgrouleff/bclose.vim'                # shows marks, m/ shortcuts
[[plugins]]

repo = 'Shougo/dein.vim' 

[[plugins]]
repo =  'itchyny/lightline.vim'                # shows marks, m/ shortcuts
hook_add = '''


             "\   'filename': '%<%f',


 let g:lightline = {
             \ 'component': {
             \   'lineinfo': ' %3l:%-2L'
             \ },
             \ 'component_function': {
             \   'gitdir': 'LightlineGitdir',
             \   'filename': 'LightlineFilename',
             \   'readonly': 'LightlineReadonly',
             \   'fugitive': 'LightlineFugitive',
             \   'mygutter': 'MyGitGutter',
             \   'filetype': 'MyFiletype',
             \   'fileformat': 'MyFileformat'
             \ },
             \ 'separator': { 'left': '', 'right': '' },
             \ 'subseparator': { 'left': '', 'right': '' }
             \ }

 let g:lightline.colorscheme = 'material'


 		let g:lightline.tabline = {
 		    \ 'left': [ [ 'tabs' ] ],
 		    \ 'right': [ [ 'absolutepath' ] ] }



 let g:lightline.active = {
             \ 'left': [ [ 'mode', 'paste' ],
             \           [ 'fugitive', 'gitdir', 'relativepath'] ],
             \ 'right': [ [ 'lineinfo' ],
             \            [ 'percent' ],
             \            [ 'fileformat', 'fileencoding', 'filetype' ] ] }


function! LightlineGitdir()
  let root = fnamemodify(get(b:, 'git_dir'), ':~:h')
"  let path = expand('%:p')
"  if path[:len(root)-1] ==# root
"    return path[len(root)+1:]
"  endif
"  return expand('%')
return root
endfunction



 function! MyGitGutter()
     if ! exists('*GitGutterGetHunkSummary')
                 \ || ! get(g:, 'gitgutter_enabled', 0)
                 \ || winwidth('.') <= 90
         return ''
     endif
     let symbols = [
                 \ g:gitgutter_sign_added . ' ',
                 \ g:gitgutter_sign_modified . ' ',
                 \ g:gitgutter_sign_removed . ' '
                 \ ]
     let hunks = GitGutterGetHunkSummary()
     let ret = []
     for i in [0, 1, 2]
         if hunks[i] > 0
             call add(ret, symbols[i] . hunks[i])
         endif
     endfor
     return join(ret, ' ')
 endfunction


 function! MyFiletype()
     return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
 endfunction

 function! MyFileformat()
     return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
 endfunction

 function! LightlineModified()
     return &ft =~ 'help\|vimfiler' ? '' : &modified ? '+' : &modifiable ? '' : '-'
 endfunction
 function! LightlineReadonly()
     return &ft !~? 'help\|vimfiler' && &readonly ? '⭤' : ''
 endfunction
 function! LightlineFilename()
     return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
                 \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
                 \  &ft == 'unite' ? unite#get_status_string() :
                 \  &ft == 'vimshell' ? vimshell#get_status_string() :
                 \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
                 \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
 endfunction
 function! LightlineFugitive()
     if &ft !~? 'vimfiler' && exists('*fugitive#head')
         let branch = fugitive#head()
         return branch !=# '' ? '⭠ '.branch : ''
     endif
     return ''
 endfunction




 		let g:lightline.enable = {
 		    \ 'statusline': 1,
 		    \ 'tabline': 1
 		    \ }



'''


[[plugins]]
repo =  'ryanoasis/vim-devicons'
#on_cmd = ['WebDevIconsGetFileFormatSymbol']
hook_add = '''
  let g:webdevicons_enable_denite = 1
  let g:webdevicons_enable_vimfiler = 1
  let g:webdevicons_enable = 1
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'




[[plugins]]
repo = 'tbodt/deoplete-tabnine'
build = './install.sh'




[[plugins]]
repo = 'shougo/deoplete.nvim'
hook_add = '''
    let g:deoplete#enable_at_startup = 1
    call deoplete#custom#source('ultisnips', 'rank', 1000)
    " ditch fuzzy mwatching
    call deoplete#custom#source('_', 'matchers', ['matcher_head'])

    " call deoplete#custom#source('buffer', 'min_pattern_length', 9999)
    call deoplete#custom#source('clang', 'input_pattern', '\.\w*|\.->\w*|\w+::\w*')
    call deoplete#custom#source('clang', 'max_pattern_length', -1)


    let g:deoplete#sources#ternjs#tern_bin = '/usr/bin/tern'
    let g:deoplete#sources#ternjs#types = 1
    let g:deoplete#sources#ternjs#docs = 1

"   let g:deoplete#keyword_patterns = {}
"   let g:deoplete#keyword_patterns._ = '[a-zA-Z_]\k*\(?'
"   let g:deoplete#keyword_patterns.tex = '[^\w|\s][a-zA-Z_]\w*'
"
"   let g:deoplete#omni#input_patterns = {}
"   let g:deoplete#omni#input_patterns.python = ''
"
"
"   let g:deoplete#omni#functions = {}
"
"   let g:deoplete#omni#functions.javascript = [ 'tern#Complete', 'jspc#omni' ]
"
"   let g:tern#command = ["/usr/bin/tern"]
"   let g:tern#arguments = ["--persistent"]
"
"
"   let g:deoplete#sources#jedi#enable_typeinfo = 0
"   let g:deoplete#sources#jedi#show_docstring = 1
"
"   " inoremap <silent><expr> <C-t> deoplete#manual_complete('file')
"
"   "let g:deoplete#enable_refresh_always = 0
"   let g:deoplete#enable_camel_case = 0
"   " let g:deoplete#auto_complete_delay = 50
    " let g:deoplete#auto_complete_start_length = 3
'''

# [[plugins]]
# repo = 'Shougo/deoplete-lsp'
# hook_add = '''
# call lsp#server#add('python', 'pyls')
# call lsp#server#add('javascript', 'javascript-typescript-stdio')
# call lsp#server#add('ruby', 'solargraph stdio')
# call lsp#server#add('zsh', 'bash-language-server start')
# call lsp#server#add('bash', ['bash-language-server', 'start'])
# call lsp#server#add('rust', ['rustup', 'run', 'stable', 'rls'])
# '''









[[plugins]]
repo = 'joshdick/onedark.vim'

# [[plugins]]
# repo = 'rakr/vim-one'

[[plugins]]
repo = 'morhetz/gruvbox'

[[plugins]]
repo = 'lifepillar/vim-solarized8'









[[plugins]]
repo = 'airblade/vim-rooter'    
hook_add = '''

    "let g:rooter_manual_only = 0
    let g:rooter_silent_chdir = 1
    let g:rooter_resolve_links = 1
'''

[[plugins]]
repo = 'Shougo/vimfiler.vim'
hook_add = '''
    let g:vimfiler_as_default_explorer = 1
    let g:vimfiler_ignore_pattern = '^\%(\.git\|\.DS_Store\)$'
'''






[[plugins]]
repo = 'haya14busa/vim-textobj-function-syntax'  # req lib

[[plugins]]
repo = 'kana/vim-textobj-user'                   # req lib (diy objs)

[[plugins]]
repo = 'kana/vim-textobj-indent'                 # i textobj

[[plugins]]
repo = 'kana/vim-textobj-function'               # f textobj

[[plugins]]
repo = 'kana/vim-textobj-line'                   # l textobj

[[plugins]]
repo = 'beloglazov/vim-textobj-quotes'           # q textobj

[[plugins]]
repo = 'kana/vim-textobj-help'

[[plugins]]
repo = 'rhysd/vim-textobj-anyblock'               # b textobj (parens, quotes, brackets, <)

[[plugins]]
repo = 'terryma/vim-expand-region'

[[plugins]]
repo =  'easymotion/vim-easymotion'
hook_add = '''
let g:EasyMotion_keys = 'asdfghjkl;qwertyuiopzxcvbnmASDFGHJKLQWERTYUIOPZXCVBNM'
let g:Easymotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
'''

[[plugins]]
repo =  'junegunn/vim-easy-align'                   # ga =




#[[plugins]]
#repo = 'vim-airline/vim-airline-themes'
#
#
#[[plugins]]
#repo = 'vim-airline/vim-airline'
#hook_add = '''
#
#
#
#  let g:airline_powerline_fonts = 1
#    let g:airline_theme='minimalist'
#    let g:airline_minimalist_showmod = 1
#
#  let g:airline_left_sep = ''
#  let g:airline_left_alt_sep = ''
#  let g:airline_right_sep = ''
#  let g:airline_right_alt_sep = ''
#
#
#  if ! exists('g:airline_symbols')
#      let g:airline_symbols = {}
#  endif
#
#  let g:airline_symbols.branch = ''
#  let g:airline_symbols.readonly = ''
#  let g:airline_symbols.linenr = '☰'
#  let g:airline_symbols.maxlinenr = ''
#
#let g:airline#extensions#tabline#enabled = 1
#let g:airline#extensions#tabline#show_buffers = 0
#let g:airline#extensions#tabline#show_splits = 0
#let g:airline#extensions#tabline#show_tabs = 1
#let g:airline#extensions#tabline#show_tab_nr = 1
#let g:airline#extensions#tabline#show_tab_type = 1
#let g:airline#extensions#tabline#close_symbol = '×'
#let g:airline#extensions#tabline#show_close_button = 0
#
#  let g:airline#extensions#languageclient#enabled = 1
#'''

[[plugins]]
repo = 'tpope/vim-eunuch'                          # :Delete, :Rename, :SudoWrite

[[plugins]]
repo = 'tpope/vim-unimpaired'                      # yo, ]b, etc

[[plugins]]
repo = 'tpope/vim-commentary'                      # gcc, gcW, g/TODO/Commentary


[[plugins]]
repo = 'tpope/vim-surround'                        

[[plugins]]
repo = 'tommcdo/vim-exchange'                        # cx holy shit

[[plugins]]
repo = 'tpope/vim-repeat'                          # dot repeat for plugins



[[plugins]]
repo =  'Chiel92/vim-autoformat'                # shows marks, m/ shortcuts
