[[plugins]]
repo = 'lambdalisue/vim-gista'
on_cmd = 'Gista'

[[plugins]]
repo = 'lambdalisue/vim-gista-unite'
depends = 'vim-gista'
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'


[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'SirVer/ultisnips'
depends = ['context_filetype.vim']
on_event = 'InsertCharPre'
hook_source = '''
let g:UltiSnipsExpandTrigger="<c-s>"
let g:UltiSnipsJumpForwardTrigger="<c-s>"
let g:UltiSnipsJumpBackwardTrigger="<c-p>"

let g:UltiSnipsSnippetDirectories=["UltiSnips", "snips"]

  function! UltiSnipsCallUnite()
    Unite -start-insert -winheight=100 -immediately -no-empty ultisnips
    return ''
  endfunction

  inoremap <silent> <F12> <C-R>=(pumvisible()? "\<LT>C-E>":"")<CR><C-R>=UltiSnipsCallUnite()<CR>
  nnoremap <silent> <F12> a<C-R>=(pumvisible()? "\<LT>C-E>":"")<CR><C-R>=UltiSnipsCallUnite()<CR>

'''

[[plugins]]
repo = 'zchee/deoplete-zsh'
on_ft = ['zsh', 'sh']


[[plugins]]
repo = 'shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_source = '''
    let g:deoplete#enable_at_startup = 1
    call deoplete#custom#source('ultisnips', 'rank', 1000)
    " ditch fuzzy mwatching
    call deoplete#custom#source('_', 'matchers', ['matcher_head'])

    " call deoplete#custom#source('buffer', 'min_pattern_length', 9999)
    call deoplete#custom#source('clang', 'input_pattern', '\.\w*|\.->\w*|\w+::\w*')
    call deoplete#custom#source('clang', 'max_pattern_length', -1)


    let g:deoplete#sources#ternjs#tern_bin = '/usr/bin/tern'
    let g:deoplete#sources#ternjs#types = 1
    let g:deoplete#sources#ternjs#docs = 1

"   let g:deoplete#keyword_patterns = {}
"   let g:deoplete#keyword_patterns._ = '[a-zA-Z_]\k*\(?'
"   let g:deoplete#keyword_patterns.tex = '[^\w|\s][a-zA-Z_]\w*'
"
"   let g:deoplete#omni#input_patterns = {}
"   let g:deoplete#omni#input_patterns.python = ''
"
"
"   let g:deoplete#omni#functions = {}
"
"   let g:deoplete#omni#functions.javascript = [ 'tern#Complete', 'jspc#omni' ]
"
"   let g:tern#command = ["/usr/bin/tern"]
"   let g:tern#arguments = ["--persistent"]
"
"
"   let g:deoplete#sources#jedi#enable_typeinfo = 0
"   let g:deoplete#sources#jedi#show_docstring = 1
"
"   " inoremap <silent><expr> <C-t> deoplete#manual_complete('file')
"
"   "let g:deoplete#enable_refresh_always = 0
"   let g:deoplete#enable_camel_case = 0
"   " let g:deoplete#auto_complete_delay = 50
    " let g:deoplete#auto_complete_start_length = 3
    call deoplete#enable()
'''
[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = '''
let g:echodoc#type = 'virtual'
call echodoc#enable()
'''

[[plugins]]
repo =  'iamcco/devdocs.nvim'

[[plugins]]
repo = 'Shougo/deol.nvim'
depends = 'denite.nvim'
hook_source = '''
"   let g:deol#prompt_pattern = '% \|%$'

" nnoremap <silent> [Space]s :<C-u>Deol zsh -edit<CR>
"nnoremap <silent> N :<C-u>call deol#new({'command': 'xonsh'})<CR>
"nnoremap <silent> [Space]s :<C-u>Deol xonsh<CR>
"nnoremap <silent> [Window]D  :<C-u>call deol#kill_editor()<CR>

"  nnoremap <silent> <C-t> :<C-u>Denite
"      \ -select=`tabpagenr()-1` -mode=normal deol:zsh<CR>
'''




[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''

nnoremap <silent>   <Space>F
\ :<C-u>Defx -auto-cd -listed -show-ignored-files -resume -buffer-name=tab`tabpagenr()`<CR>
'''
hook_source = '''
call defx#custom#column('mark', {
      \ 'directory_icon': '▸',
      \ 'readonly_icon': '✗',
      \ 'selected_icon': '✓',
      \ })
'''
[plugins.ftplugin]
defx = '''
" Define mappings
nnoremap <silent><buffer><expr> <CR>
\ defx#async_action('drop')
nnoremap <silent><buffer><expr> c
\ defx#do_action('copy')
nnoremap <silent><buffer><expr> !
\ defx#do_action('execute_command')
nnoremap <silent><buffer><expr> m
\ defx#do_action('move')
nnoremap <silent><buffer><expr> p
\ defx#do_action('paste')
nnoremap <silent><buffer><expr> l
\ defx#async_action('open')
nnoremap <silent><buffer><expr> E
\ defx#do_action('open', 'vsplit')
nnoremap <silent><buffer><expr> P
\ defx#do_action('open', 'pedit')
nnoremap <silent><buffer><expr> K
\ defx#do_action('new_directory')
nnoremap <silent><buffer><expr> N
\ defx#do_action('new_file')
nnoremap <silent><buffer><expr> M
\ defx#do_action('new_multiple_files')
nnoremap <silent><buffer><expr> C
\ defx#do_action('toggle_columns', 'mark:filename:type:size:time')
nnoremap <silent><buffer><expr> S
\ defx#do_action('toggle_sort', 'Time')
nnoremap <silent><buffer><expr> d
\ defx#do_action('remove_trash')
nnoremap <silent><buffer><expr> r
\ defx#do_action('rename')
nnoremap <silent><buffer><expr> x
\ defx#do_action('execute_system')
nnoremap <silent><buffer><expr> >
\ defx#do_action('toggle_ignored_files')
nnoremap <silent><buffer><expr> .
\ defx#do_action('repeat')
nnoremap <silent><buffer><expr> yy
\ defx#do_action('yank_path')
nnoremap <silent><buffer><expr> h
\ defx#do_action('cd', ['..'])
nnoremap <silent><buffer><expr> ~
\ defx#do_action('cd')
nnoremap <silent><buffer><expr> \
\ defx#do_action('cd', getcwd())
nnoremap <silent><buffer><expr> q
\ defx#do_action('quit')
nnoremap <silent><buffer><expr> <Space>
\ defx#do_action('toggle_select') . 'j'
nnoremap <silent><buffer><expr> *
\ defx#do_action('toggle_select_all')
nnoremap <silent><buffer><expr> j
\ line('.') == line('$') ? 'gg' : 'j'
nnoremap <silent><buffer><expr> k
\ line('.') == 1 ? 'G' : 'k'
nnoremap <silent><buffer><expr> <C-l>
\ defx#do_action('redraw')
nnoremap <silent><buffer><expr> <C-g>
\ defx#do_action('print')
nnoremap <silent><buffer><expr> <Tab> winnr('$') != 1 ?
\ ':<C-u>wincmd w<CR>' :
\ ':<C-u>Defx -buffer-name=temp -split=vertical<CR>'
'''



[[plugin]]
repo = 'machakann/vim-highlightedyank'
on_event = 'TextYankPost'



[[plugins]]
repo =  'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_source = 'denite.nvim'
hook_add = '''
let g:neoyank#file = expand('$XDG_CACHE_HOME/neoyank.yanks')
" let g:neoyank#save_registers = [ '"' ]
let g:neoyank#limit = 25
'''

[[plugins]]
repo =  'dunstontc/projectile.nvim'
hook_add = '''
     let g:projectile#enable_devicons = 1
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_source = '''
let g:dgs#username='sgoranson'

if executable('rg')
    call denite#custom#var('file_rec', 'command', ['rg', '--files', '--hidden', '--glob', '!.git'])

    call denite#custom#var('grep', 'command', ['rg'])
    call denite#custom#var('grep', 'default_opts', ['--vimgrep', '--no-heading', '-S'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
else
    call denite#custom#var('file_rec', 'command',
                \ ['ag', '--follow', '--hidden', '--nocolor', '--nogroup', '-g', ''])
endif

call denite#custom#alias('source', 'file_mru/git', 'file_mru')
call denite#custom#alias('source', 'file_rec/git', 'file_rec')
call denite#custom#var('file_rec/git', 'command',
        \   ['git', 'ls-files', '--cached', '--others', '--exclude-standard'] )

call denite#custom#alias('source', 'grep/git', 'grep')
call denite#custom#var('grep/git', 'command', ['git', '--no-pager', 'grep'])
call denite#custom#var('grep/git', 'default_opts',
        \   ['--ignore-case', '--cached', '--untracked', '--exclude-standard', '-nH'] )
call denite#custom#var('grep/git', 'recursive_opts', [])
call denite#custom#var('grep/git', 'pattern_opt', ['--extended-regexp'])
call denite#custom#var('grep/git', 'separator', [])
call denite#custom#var('grep/git', 'final_opts', [])


"call denite#custom#var('commands', 'config', g:vim_home_dir . '/mycmds.json' )


call denite#custom#source('unite:mapping', 'sorters', ['sorter/word'])

call denite#custom#var('neoyank', 'default_action', ['yank'])

call denite#custom#source('grep,grep/git,file_mru,buffer,file_rec/git,line,help,unite', 'matchers', ['matcher_substring'])
call denite#custom#source('file_rec', 'matchers', ['matcher_substring', 'matcher_project_files'])
call denite#custom#source('file_mru/git', 'matchers', ['matcher_substring', 'matcher_project_files'])
call denite#custom#source('line', 'converters', ['converter_relative_word'])

    call denite#custom#map('insert', '<Down>', '<C-G>')
    call denite#custom#map('insert', '<C-j>', '<C-G>')
    call denite#custom#map('insert', '<Up>', '<C-T>')
    call denite#custom#map('insert', '<C-k>', '<C-T>')

    call denite#custom#map('insert','<C-f>','<denite:scroll_page_forwards>','noremap')
    call denite#custom#map('insert','<C-b>','<denite:scroll_page_backwards>','noremap')

    call denite#custom#map('insert','<Tab>','<denite:move_to_next_line>','noremap')
    call denite#custom#map('insert','<C-s>','<denite:do_action:split>','noremap')
    call denite#custom#map('insert','<C-d>','<denite:do_action:delete>','noremap')
    call denite#custom#map('insert','<C-v>','<denite:do_action:vsplit>','noremap')
    call denite#custom#map('insert','<C-y>','<denite:do_action:yank>','noremap')
    call denite#custom#map('insert','<S-Tab>','<denite:move_to_previous_line>','noremap')
    call denite#custom#map('insert','<C-space>','<denite:choose_action>','noremap')


    let s:denite_options = {'default' : {
        \ 'winheight' : 15,
        \ 'mode' : 'insert',
        \ 'smartcase' : 'true',
        \ 'direction': 'rightbelow',
        \ 'statusline' : 'false',
        \'prompt' : 'λ',
        \ }}

    function! s:profile(opts) abort
    for fname in keys(a:opts)
    for dopt in keys(a:opts[fname])
call denite#custom#option(fname, dopt, a:opts[fname][dopt])
    endfor
    endfor
    endfunction

    runtime rc/menu.vim

    call s:profile(s:denite_options)

  nnoremap <silent> <space>/      :<C-u>Denite -buffer-name=search -auto-highlight line<CR>
  nnoremap <silent> *           :<C-u>DeniteCursorWord -buffer-name=search -auto-highlight -mode=normal line<CR>
  nnoremap <silent> ;;          :<C-u>Denite command command_history<CR>

  nnoremap <silent> ;r          :<C-u>Denite -buffer-name=register register neoyank<CR>
  xnoremap <silent> ;r          :<C-u>Denite -default-action=replace -buffer-name=register register neoyank<CR>

'''




[[plugins]]
repo =  'iamcco/denite-source.vim'
on_source = 'denite.nvim'

[[plugins]]
repo =  'chemzqm/unite-location'
on_source = 'denite.nvim'

[[plugins]]
repo =  'zacharied/denite-nerdfont'
on_source = 'denite.nvim'


[[plugins]]
repo =  'bennyyip/denite-github-stars'
on_source = 'denite.nvim'
hook_add = '''
    let g:dgs#username='sgoranson'
'''

[[plugins]]
repo = 'Jagua/vim-denite-ghq'
on_source = 'denite.nvim'



[[plugins]]
repo =  'Shougo/neomru.vim'
on_source = 'denite.nvim'


[[plugins]]
repo =  'neoclide/denite-git'
on_source = 'denite.nvim'

[[plugins]]
repo =  'neoclide/vim-easygit'
on_source = 'denite.nvim'

# [[plugins]]
# repo =  'neoclide/denite-extra'
# on_source = 'denite.nvim'
# on_cmd = 'SessionLoad'
# hook_source = '''
# let g:denite_source_session_path=expand("~/data/nvim/session")    
# '''

[[plugins]]
repo =  'rafi/vim-denite-session'
on_source = 'denite.nvim'
hook_source = '''
let g:session_directory=expand("~/data/nvim/session")    
'''

[[plugins]]
repo =  'Shougo/unite-outline'
on_source = 'denite.nvim'

# UNITE {{{
[[plugins]]
repo =  'Shougo/unite.vim'
on_source = 'denite.nvim'
hook_source = '''

		let g:unite_source_menu_menus = {}
		let g:unite_source_menu_menus.test = {
		      \     'description' : 'Test menu',
		      \ }
		let g:unite_source_menu_menus.test.candidates = {
		      \   'ghci'      : 'VimShellInteractive ghci',
		      \ }
		function g:unite_source_menu_menus.test.map(key, value)
		  return {
		      \       'word' : a:key, 'kind' : 'command',
		      \       'action__command' : a:value,
		      \     }
		endfunction

		let g:unite_source_menu_menus.test2 = {
		      \     'description' : 'Test menu2',
		      \ }
		let g:unite_source_menu_menus.test2.command_candidates = {
		      \   'python'    : 'VimShellInteractive python',
		      \ }

		let g:unite_source_menu_menus.test3 = {
		      \     'description' : 'Test menu3',
		      \ }
		let g:unite_source_menu_menus.test3.command_candidates = [
		      \   ['ruby', 'VimShellInteractive ruby'],
		      \   ['python', 'VimShellInteractive python'],
		      \ ]

		let g:unite_source_menu_menus.zsh = {
		      \     'description' : 'zsh files',
		      \ }
		let g:unite_source_menu_menus.zsh.file_candidates = [
		      \       ['zshenv'    , '~/.zshenv'],
		      \       ['zshrc'     , '~/.zshrc'],
		      \       ['zplug'     , '~/.zplug'],
		      \ ]

let g:unite_enable_start_insert=1
let g:unite_data_directory=expand("~/data/unite")

"	 Like ctrlp.vim settings.
	call unite#custom#profile('default', 'context', {
	\   'start_insert': 1,
	\   'winheight': 20,
	\   'prompt-direction': 'top',
	\   'prompt-focus': 1,
	\   'prompt': '> ',
	\   'direction': 'botright'
	\ })

	autocmd FileType unite call s:unite_my_settings()
	function! s:unite_my_settings()"{{{
	  " Overwrite settings.

	  imap <buffer> <Esc>      <Plug>(unite_insert_leave)
	  " Runs "split" action by <C-s>.
	  imap <silent><buffer><expr> <C-v>     unite#do_action('splitv')
	  imap <silent><buffer><expr> <C-o>     <Plug>(unite_insert_leave)
	  imap <silent><buffer><expr> <C-p>     unite#do_action('preview')
	  imap <silent><buffer><expr> <C-x>h     <Plug>(unite_quick_help)

	  imap <buffer><expr> j unite#smart_map('j', '')
	  imap <buffer> <TAB>   <Plug>(unite_select_next_line)
	  imap <buffer> <c-j>   <Plug>(unite_select_next_line)
	  imap <buffer> <c-k>   <Plug>(unite_select_previous_line)
	  imap <buffer> '     <Plug>(unite_quick_match_default_action)
	  nmap <buffer> '     <Plug>(unite_quick_match_default_action)
	  nmap <buffer>  <Esc>     <Plug>(unite_all_exit)
	  imap <buffer><expr> x
	          \ unite#smart_map('x', "\<Plug>(unite_quick_match_jump)")
	  nmap <buffer> x     <Plug>(unite_quick_match_jump)
	  nmap <buffer> <C-r>     <Plug>(unite_narrowing_input_history)
	  imap <buffer> <C-r>     <Plug>(unite_narrowing_input_history)
	  nnoremap <silent><buffer><expr> l
	          \ unite#smart_map('l', unite#do_action('default'))


	  nnoremap <silent><buffer><expr> cd     unite#do_action('lcd')
	  nnoremap <buffer><expr> S      unite#mappings#set_current_sorters(
	          \ empty(unite#mappings#get_current_sorters()) ?
	          \ ['sorter_reverse'] : [])

	endfunction"}}}
'''

# }}}




[[plugins]]
repo = 'szw/vim-maximizer'
hook_add = '''
nmap <C-w>m :MaximizerToggle<CR>
'''







[[plugins]]
repo = 'inkarkat/vim-SyntaxRange'





[[plugins]]
repo = 'Shougo/neco-syntax'




[[plugins]]
repo =  'Shougo/tabpagebuffer.vim'

[[plugins]]
repo =  'thinca/vim-ref'












[[plugins]]
repo = 'haya14busa/dein-command.vim'
on_cmd = 'Dein'


[[plugins]]
repo =  'rbgrouleff/bclose.vim'                # shows marks, m/ shortcuts
on_source = 'denite.nvim'



[[plugins]]
repo = 'chrisbra/vim-zsh'                          # :Delete, :Rename, :SudoWrite


[[plugins]]
repo =  'PotatoesMaster/i3-vim-syntax'                # shows marks, m/ shortcuts
on_ft = 'i3'

[[plugins]]
repo =  'francoiscabrol/ranger.vim'                # shows marks, m/ shortcuts
# hook_add = '''
# let g:ranger_replace_netrw = 1
# '''


[[plugins]]
repo =  'cespare/vim-toml'                # shows marks, m/ shortcuts
on_ft = 'toml'

[[plugins]]
repo =  'maralla/vim-toml-enhance'                # shows marks, m/ shortcuts
on_ft = 'toml'



[[plugins]]
repo =  'godlygeek/tabular'

[[plugins]]
repo =  'plasticboy/vim-markdown'
hook_add = '''
let g:vim_markdown_folding_disabled = 1
'''
on_ft = 'md'


[[plugins]]
repo =  'hiphish/info.vim'
on_cmd = 'Info'
hook_add = '''
autocmd FileType info nmap N :InfoNext<CR>
autocmd FileType info nmap P :InfoPrev<CR>
autocmd FileType info nmap U :InfoUp<CR>
'''



[[plugins]]
repo =  'Rykka/riv.vim'
hook_add = '''
let proj1 = { 'path': '~/projects/rst-site', }
let g:riv_projects = [proj1]
'''

[[plugins]]
repo =  'Rykka/InstantRst'
hook_add = '''
let g:instant_rst_browser = 'qutebrowser'
'''


[[plugins]]
repo =  'junegunn/gv.vim'



[[plugins]]
repo =  'yuratomo/w3m.vim'
on_cmd = 'W3m'


[[plugins]]
repo =  'gregsexton/gitv'

[[plugins]]
repo =  'KabbAmine/vCoolor.vim'
hook_add = '''
    let g:vcoolor_disable_mappings = 1
    '''
on_cmd = 'Vcoolor'


# [[plugins]]
# repo =  'sgoranson/colorv.vim'
# on_cmd = 'ColorV'
# hook_add = '''

# "let g:_colorv['mode'] = 'gui'
# '''

[[plugins]]
repo = 'mattn/webapi-vim'
on_source = 'colorv.vim'




[[plugins]]
repo = 'Shougo/junkfile.vim'
on_source = 'denite.nvim'
hook_add = '''
  nnoremap <silent> <space>ju :<C-u>Denite junkfile:new junkfile<CR>
'''

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'


